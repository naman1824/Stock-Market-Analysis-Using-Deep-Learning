# -*- coding: utf-8 -*-
"""StockMarketDL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BQXhlGDZ88g3gXxNYNrza7BypMtqa8yy
"""

#Keras and Tensorflow

#import pandas
import pandas_datareader as pdr

!pip install pandas==1.5.3
!pip install pandas_datareader==0.10.0

df = pdr.get_data_tiingo('GOOG', api_key = 'd98702ae7dabf898d69b02db80cb17d2e3f5eeb9')

df.to_csv('GOOG.csv')

import pandas as pd

df = pd.read_csv('GOOG.csv')

df.head()

df.tail()

df1 = df.reset_index()['close']

df1.shape

df1

import matplotlib.pyplot as plt
plt.plot(df1)

import numpy as np

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
df1 = scaler.fit_transform(np.array(df1).reshape(-1, 1))

df1

df1.shape

training_size = int(len(df1)*0.65)
test_size = len(df1)-training_size
train_data, test_data = df1[0:training_size,:], df1[training_size:len(df1):1]

train_data, test_data

training_size, test_size

import numpy
def create_dataset(dataset, time_step = 1):
  dataX, dataY = [], []
  for i in range(len(dataset)-time_step-1):
    a = dataset[i:(i+time_step), 0]
    dataX.append(a)
    dataY.append(dataset[i+time_step, 0])
  return numpy.array(dataX), numpy.array(dataY)

#Reshape into X=t, t+1, t+2, t+3 and Y = t+4
time_step = 100
x_train, y_train = create_dataset(train_data, time_step)
x_test, y_test = create_dataset(test_data, time_step)

print(x_train.shape), print(y_train.shape)

print(x_test.shape), print(y_test.shape)

#Reshape into 3d for lstm model
x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], 1)
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)

#create stacked lstm model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

model = Sequential()
model.add(LSTM(50, return_sequences = True, input_shape = (100, 1)))
model.add(LSTM(50, return_sequences = True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss = 'mean_squared_error', optimizer = 'adam')

model.summary()

model.fit(x_train, y_train, validation_data = (x_test, y_test), epochs = 100, batch_size = 64, verbose = 1)

import tensorflow as tf

tf.__version__

#precict and check performance metrics
train_predict = model.predict(x_train)
test_predict = model.predict(x_test)

#transform back to original form
train_predict = scaler.inverse_transform(train_predict)
test_predict - scaler.inverse_transform(test_predict)

#calculate RMSE performance metrics
import math
from sklearn.metrics import mean_squared_error

math.sqrt(mean_squared_error(y_train, train_predict))

#test data
math.sqrt(mean_squared_error(y_test, test_predict))

#plotting
look_back = 100
trainPredictPlot = numpy.empty_like(df1)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back:len(train_predict) + look_back, :] = train_predict
testPredictPlot = numpy.empty_like(df1)
testPredictPlot[:, :] = np.nan
testPredictPlot[len(train_predict)+ (look_back*2) + 1:len(df1)-1, :] = test_predict
plt.plot(scaler.inverse_transform(df1))
plt.plot(trainPredictPlot)
plt.show()

len(test_data)

x_input = test_data[340:].reshape(1, -1)
x_input.shape

temp_input = list(x_input)
temp_input = temp_input[0].tolist()

temp_input

#predict next 10days data
lst_output = []
n_steps = 100
i = 0
while i<30:
  if(len(temp_input)>100):
    x_input = np.array(temp_input[1:])
    print("{} day input {}". format(i, x_input))
    x_input = x_input.reshape(1, -1)
    x_input = x_input.reshape((1, n_steps, 1))
    yhat = model.predict(x_input, verbose = 0)
    print("{} day output {}". format(i, yhat))
    temp_input.extend(yhat[0].tolist())
    temp_input = temp_input[1:]
    lst_output.extend(yhat.tolist())
    i = i + 1
  else:
    x_input = x_input.reshape((1, n_steps, 1))
    yhat = model.predict(x_input, verbose = 0)
    print(yhat[0])
    temp_input.extend(yhat[0].tolist())
    print(len(temp_input))
    lst_output.extend(yhat[0].tolist())
    i = i + 1
print(lst_output)

day_new = np.arange(1, 101)
day_pred = np.arange(101, 131)

import matplotlib.pyplot as plt

len(df1)

df3 = df1.tolist()
df3.extend(lst_output)

plt.plot(day_new, scaler.inverse_transform(df1[1156:]))
plt.plot(day_pred, scaler.inverse_transform(lst_output))

df3 = df1.tolist()
df3.extend(lst_output)
plt.plot(df3[1200:])